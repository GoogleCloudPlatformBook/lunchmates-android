/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2015-03-26 20:30:19 UTC)
 * on 2015-04-22 at 10:26:21 UTC 
 * Modify at your own risk.
 */

package com.appspot.lunch__mates__endpoints.lunchmates;

/**
 * Service definition for Lunchmates (v1).
 *
 * <p>
 * LunchMates API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link LunchmatesRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Lunchmates extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.20.0 of the lunchmates library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://lunch--mates--endpoints.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "lunchmates/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Lunchmates(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Lunchmates(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Auth collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Lunchmates lunchmates = new Lunchmates(...);}
   *   {@code Lunchmates.Auth.List request = lunchmates.auth().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Auth auth() {
    return new Auth();
  }

  /**
   * The "auth" collection of methods.
   */
  public class Auth {

    /**
     * An accessor for creating requests from the Users collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Lunchmates lunchmates = new Lunchmates(...);}
     *   {@code Lunchmates.Users.List request = lunchmates.users().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Users users() {
      return new Users();
    }

    /**
     * The "users" collection of methods.
     */
    public class Users {

      /**
       * Create a request for the method "users.authenticate".
       *
       * This request holds the parameters needed by the lunchmates server.  After setting any optional
       * parameters, call the {@link Authenticate#execute()} method to invoke the remote operation.
       *
       * @param content the {@link com.appspot.lunch__mates__endpoints.lunchmates.model.UserDataProto}
       * @return the request
       */
      public Authenticate authenticate(com.appspot.lunch__mates__endpoints.lunchmates.model.UserDataProto content) throws java.io.IOException {
        Authenticate result = new Authenticate(content);
        initialize(result);
        return result;
      }

      public class Authenticate extends LunchmatesRequest<com.appspot.lunch__mates__endpoints.lunchmates.model.UserData> {

        private static final String REST_PATH = "authenticate";

        /**
         * Create a request for the method "users.authenticate".
         *
         * This request holds the parameters needed by the the lunchmates server.  After setting any
         * optional parameters, call the {@link Authenticate#execute()} method to invoke the remote
         * operation. <p> {@link
         * Authenticate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param content the {@link com.appspot.lunch__mates__endpoints.lunchmates.model.UserDataProto}
         * @since 1.13
         */
        protected Authenticate(com.appspot.lunch__mates__endpoints.lunchmates.model.UserDataProto content) {
          super(Lunchmates.this, "POST", REST_PATH, content, com.appspot.lunch__mates__endpoints.lunchmates.model.UserData.class);
        }

        @Override
        public Authenticate setAlt(java.lang.String alt) {
          return (Authenticate) super.setAlt(alt);
        }

        @Override
        public Authenticate setFields(java.lang.String fields) {
          return (Authenticate) super.setFields(fields);
        }

        @Override
        public Authenticate setKey(java.lang.String key) {
          return (Authenticate) super.setKey(key);
        }

        @Override
        public Authenticate setOauthToken(java.lang.String oauthToken) {
          return (Authenticate) super.setOauthToken(oauthToken);
        }

        @Override
        public Authenticate setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Authenticate) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Authenticate setQuotaUser(java.lang.String quotaUser) {
          return (Authenticate) super.setQuotaUser(quotaUser);
        }

        @Override
        public Authenticate setUserIp(java.lang.String userIp) {
          return (Authenticate) super.setUserIp(userIp);
        }

        @Override
        public Authenticate set(String parameterName, Object value) {
          return (Authenticate) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * An accessor for creating requests from the Meeting collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Lunchmates lunchmates = new Lunchmates(...);}
   *   {@code Lunchmates.Meeting.List request = lunchmates.meeting().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Meeting meeting() {
    return new Meeting();
  }

  /**
   * The "meeting" collection of methods.
   */
  public class Meeting {

    /**
     * An accessor for creating requests from the Meetings collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Lunchmates lunchmates = new Lunchmates(...);}
     *   {@code Lunchmates.Meetings.List request = lunchmates.meetings().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Meetings meetings() {
      return new Meetings();
    }

    /**
     * The "meetings" collection of methods.
     */
    public class Meetings {

      /**
       * Create a request for the method "meetings.create".
       *
       * This request holds the parameters needed by the lunchmates server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param content the {@link com.appspot.lunch__mates__endpoints.lunchmates.model.Meeting}
       * @return the request
       */
      public Create create(com.appspot.lunch__mates__endpoints.lunchmates.model.Meeting content) throws java.io.IOException {
        Create result = new Create(content);
        initialize(result);
        return result;
      }

      public class Create extends LunchmatesRequest<com.appspot.lunch__mates__endpoints.lunchmates.model.Meeting> {

        private static final String REST_PATH = "meetings";

        /**
         * Create a request for the method "meetings.create".
         *
         * This request holds the parameters needed by the the lunchmates server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         * <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param content the {@link com.appspot.lunch__mates__endpoints.lunchmates.model.Meeting}
         * @since 1.13
         */
        protected Create(com.appspot.lunch__mates__endpoints.lunchmates.model.Meeting content) {
          super(Lunchmates.this, "POST", REST_PATH, content, com.appspot.lunch__mates__endpoints.lunchmates.model.Meeting.class);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUserIp(java.lang.String userIp) {
          return (Create) super.setUserIp(userIp);
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "meetings.list".
       *
       * This request holds the parameters needed by the lunchmates server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @return the request
       */
      public List list() throws java.io.IOException {
        List result = new List();
        initialize(result);
        return result;
      }

      public class List extends LunchmatesRequest<com.appspot.lunch__mates__endpoints.lunchmates.model.MeetingCollection> {

        private static final String REST_PATH = "meetings";

        /**
         * Create a request for the method "meetings.list".
         *
         * This request holds the parameters needed by the the lunchmates server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @since 1.13
         */
        protected List() {
          super(Lunchmates.this, "GET", REST_PATH, null, com.appspot.lunch__mates__endpoints.lunchmates.model.MeetingCollection.class);
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUserIp(java.lang.String userIp) {
          return (List) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /**

         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @com.google.api.client.util.Key
        private java.lang.Long limit;

        /**

         */
        public java.lang.Long getLimit() {
          return limit;
        }

        public List setLimit(java.lang.Long limit) {
          this.limit = limit;
          return this;
        }

        @com.google.api.client.util.Key
        private java.lang.String order;

        /**

         */
        public java.lang.String getOrder() {
          return order;
        }

        public List setOrder(java.lang.String order) {
          this.order = order;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * An accessor for creating requests from the MeetingRequest collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Lunchmates lunchmates = new Lunchmates(...);}
   *   {@code Lunchmates.MeetingRequest.List request = lunchmates.meetingRequest().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public MeetingRequest meetingRequest() {
    return new MeetingRequest();
  }

  /**
   * The "meeting_request" collection of methods.
   */
  public class MeetingRequest {

    /**
     * An accessor for creating requests from the MeetingRequests collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Lunchmates lunchmates = new Lunchmates(...);}
     *   {@code Lunchmates.MeetingRequests.List request = lunchmates.meetingRequests().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public MeetingRequests meetingRequests() {
      return new MeetingRequests();
    }

    /**
     * The "meeting_requests" collection of methods.
     */
    public class MeetingRequests {

      /**
       * Create a request for the method "meeting_requests.create".
       *
       * This request holds the parameters needed by the lunchmates server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param meetingId
       * @param content the {@link com.appspot.lunch__mates__endpoints.lunchmates.model.MeetingRequest}
       * @return the request
       */
      public Create create(java.lang.Long meetingId, com.appspot.lunch__mates__endpoints.lunchmates.model.MeetingRequest content) throws java.io.IOException {
        Create result = new Create(meetingId, content);
        initialize(result);
        return result;
      }

      public class Create extends LunchmatesRequest<com.appspot.lunch__mates__endpoints.lunchmates.model.MeetingRequest> {

        private static final String REST_PATH = "meetings/{meeting_id}/join";

        /**
         * Create a request for the method "meeting_requests.create".
         *
         * This request holds the parameters needed by the the lunchmates server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         * <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param meetingId
         * @param content the {@link com.appspot.lunch__mates__endpoints.lunchmates.model.MeetingRequest}
         * @since 1.13
         */
        protected Create(java.lang.Long meetingId, com.appspot.lunch__mates__endpoints.lunchmates.model.MeetingRequest content) {
          super(Lunchmates.this, "POST", REST_PATH, content, com.appspot.lunch__mates__endpoints.lunchmates.model.MeetingRequest.class);
          this.meetingId = com.google.api.client.util.Preconditions.checkNotNull(meetingId, "Required parameter meetingId must be specified.");
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUserIp(java.lang.String userIp) {
          return (Create) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key("meeting_id")
        private java.lang.Long meetingId;

        /**

         */
        public java.lang.Long getMeetingId() {
          return meetingId;
        }

        public Create setMeetingId(java.lang.Long meetingId) {
          this.meetingId = meetingId;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "meeting_requests.list".
       *
       * This request holds the parameters needed by the lunchmates server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param meetingId
       * @return the request
       */
      public List list(java.lang.Long meetingId) throws java.io.IOException {
        List result = new List(meetingId);
        initialize(result);
        return result;
      }

      public class List extends LunchmatesRequest<com.appspot.lunch__mates__endpoints.lunchmates.model.MeetingRequestCollection> {

        private static final String REST_PATH = "meetings/{meeting_id}/requests";

        /**
         * Create a request for the method "meeting_requests.list".
         *
         * This request holds the parameters needed by the the lunchmates server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param meetingId
         * @since 1.13
         */
        protected List(java.lang.Long meetingId) {
          super(Lunchmates.this, "GET", REST_PATH, null, com.appspot.lunch__mates__endpoints.lunchmates.model.MeetingRequestCollection.class);
          this.meetingId = com.google.api.client.util.Preconditions.checkNotNull(meetingId, "Required parameter meetingId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUserIp(java.lang.String userIp) {
          return (List) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key("meeting_id")
        private java.lang.Long meetingId;

        /**

         */
        public java.lang.Long getMeetingId() {
          return meetingId;
        }

        public List setMeetingId(java.lang.Long meetingId) {
          this.meetingId = meetingId;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * An accessor for creating requests from the UserData collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Lunchmates lunchmates = new Lunchmates(...);}
   *   {@code Lunchmates.UserData.List request = lunchmates.userData().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public UserData userData() {
    return new UserData();
  }

  /**
   * The "user_data" collection of methods.
   */
  public class UserData {

    /**
     * An accessor for creating requests from the Users collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Lunchmates lunchmates = new Lunchmates(...);}
     *   {@code Lunchmates.Users.List request = lunchmates.users().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Users users() {
      return new Users();
    }

    /**
     * The "users" collection of methods.
     */
    public class Users {

      /**
       * Create a request for the method "users.list".
       *
       * This request holds the parameters needed by the lunchmates server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @return the request
       */
      public List list() throws java.io.IOException {
        List result = new List();
        initialize(result);
        return result;
      }

      public class List extends LunchmatesRequest<com.appspot.lunch__mates__endpoints.lunchmates.model.UserDataCollection> {

        private static final String REST_PATH = "users";

        /**
         * Create a request for the method "users.list".
         *
         * This request holds the parameters needed by the the lunchmates server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @since 1.13
         */
        protected List() {
          super(Lunchmates.this, "GET", REST_PATH, null, com.appspot.lunch__mates__endpoints.lunchmates.model.UserDataCollection.class);
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUserIp(java.lang.String userIp) {
          return (List) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /**

         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @com.google.api.client.util.Key
        private java.lang.Long limit;

        /**

         */
        public java.lang.Long getLimit() {
          return limit;
        }

        public List setLimit(java.lang.Long limit) {
          this.limit = limit;
          return this;
        }

        @com.google.api.client.util.Key
        private java.lang.String order;

        /**

         */
        public java.lang.String getOrder() {
          return order;
        }

        public List setOrder(java.lang.String order) {
          this.order = order;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * Builder for {@link Lunchmates}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Lunchmates}. */
    @Override
    public Lunchmates build() {
      return new Lunchmates(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link LunchmatesRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setLunchmatesRequestInitializer(
        LunchmatesRequestInitializer lunchmatesRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(lunchmatesRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
